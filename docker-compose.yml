# Compose v2+ (no version key)

services:
  db:
    image: postgres:15-alpine
    container_name: autorisen-db
    ports:
      - "${HOST_DB_PORT:-5433}:5432"
    environment:
      TZ: Africa/Johannesburg
      POSTGRES_DB: ${POSTGRES_DB:-devdb}
      POSTGRES_USER: ${POSTGRES_USER:-devuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devpass}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/initdb:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-devuser} -d ${POSTGRES_DB:-devdb}"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: autorisen-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: >
      redis-server --appendonly yes
                   --maxmemory 256mb
                   --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: Dockerfile      # root Dockerfile (multi-stage)
      target: runtime
    container_name: autorisen-backend
    working_dir: /app/backend
    environment:
      PYTHONUNBUFFERED: "1"
      PYTHONPATH: /app/backend
      PATH: /opt/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      PORT: 8000

      # Postgres (container-internal)
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-devuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devpass}
      POSTGRES_DB: ${POSTGRES_DB:-devdb}
      # Keep driver-agnostic so SQLAlchemy picks psycopg/psycopg2 based on what's installed
      DATABASE_URL: postgresql://${POSTGRES_USER:-devuser}:${POSTGRES_PASSWORD:-devpass}@db:5432/${POSTGRES_DB:-devdb}

      # Alembic
      ALEMBIC_CONFIG: alembic.ini

      # App/CORS
      SECRET_KEY: ${SECRET_KEY:-change-me-dev-only}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev-jwt}
      ENVIRONMENT: development
      LOG_LEVEL: INFO
      FRONTEND_ORIGIN: http://localhost:3000
      CORS_ALLOW_ORIGINS: http://localhost:3000

      # Optional flags
      ENABLE_MONITORING: "true"
      ENABLE_AUDIT_LOGGING: "true"
      ENABLE_RATE_LIMITING: "true"
      ENABLE_DDOS_PROTECTION: "true"
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
      - backend_uploads:/app/backend/uploads
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${HOST_HTTP_PORT:-8000}:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command:
      - sh
      - -lc
      - |
        set -e
        cd /app/backend
        echo "⏫ Running Alembic migrations (head)..."
        /opt/venv/bin/alembic -c alembic.ini upgrade head || { echo "⚠️ Alembic failed; starting API anyway (dev)"; }
        echo "🚀 Starting Uvicorn..."
        exec /opt/venv/bin/uvicorn app.main:app --host 0.0.0.0 --port ${PORT:-8000} --reload
    healthcheck:
      # Align with your app's health route; change to /health if that's what you expose
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/alive || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  frontend:
    image: node:20-alpine
    container_name: autorisen-frontend
    working_dir: /app
    volumes:
      - ./client:/app
      - frontend_node_modules:/app/node_modules
    ports:
      # Vite listens on 5173 inside; map to 3000 on host
      - "3000:5173"
    environment:
      # When running inside Docker Compose, the frontend should reach the backend service
      # by its service name and container port. Use the backend hostname here so Vite
      # proxying inside the frontend container connects to the backend container.
      VITE_API_BASE: http://backend:8000
      VITE_APP_NAME: Autorisen
      VITE_ENVIRONMENT: development
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: "true"
    command:
      - sh
      - -lc
      - |
        set -e
        echo "🎨 Starting Frontend (Vite)..."
        npm ci
        exec npm run dev -- --host 0.0.0.0 --port 5173
    depends_on:
      backend:
        condition: service_started
    healthcheck:
      # Health-checks the container-internal Vite port (5173)
      test: ["CMD-SHELL", "wget -qO- http://localhost:5173/ >/dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: autorisen-pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - tools

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: autorisen-redis-commander
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: ${REDIS_COMMANDER_USER}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - tools

  minio:
    image: minio/minio:latest
    container_name: autorisen-minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    restart: unless-stopped
    profiles:
      - tools

  minio-mc:
    image: minio/mc:latest
    container_name: autorisen-minio-mc
    depends_on:
      minio:
        condition: service_started
    entrypoint:
      - /bin/sh
      - -lc
      - >
        mc alias set local http://minio:9000 minioadmin minioadmin &&
        mc mb -p local/cc-static || true &&
        mc mb -p local/cc-media || true &&
        mc anonymous set public local/cc-static || true &&
        mc anonymous set public local/cc-media || true
    restart: "no"    # run once, then exit
    profiles:
      - tools

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
  backend_uploads:
  frontend_node_modules:
  minio_data:
