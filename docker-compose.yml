version: "3.9"

services:
  db:
    image: postgres:15
    container_name: autorisen-db
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./backend/init_scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: autorisen-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: backend
    container_name: autorisen-backend
    ports:
      - "8000:8000"
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}

      # Redis
      REDIS_URL: redis://redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379

      # App
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      DEBUG: "true"
      ENVIRONMENT: development
      LOG_LEVEL: INFO

      # API / CORS
      API_URL: http://localhost:8000
      FRONTEND_ORIGIN: http://localhost:5173
      ALLOWED_HOSTS: localhost,127.0.0.1,0.0.0.0
      CORS_ORIGINS: http://localhost:5173,http://localhost:3000

      # AI (set in .env if needed)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}

      # Feature flags
      ENABLE_MONITORING: "true"
      ENABLE_AUDIT_LOGGING: "true"
      ENABLE_RATE_LIMITING: "true"
      ENABLE_DDOS_PROTECTION: "true"

      # Performance/Security
      WORKERS: 1
      MAX_CONNECTIONS: 100
      POOL_SIZE: 10
      MAX_OVERFLOW: 20
      BCRYPT_ROUNDS: 12
      SESSION_TIMEOUT: 3600
      MAX_LOGIN_ATTEMPTS: 5

      # Optional one-time admin bootstrap
      BOOTSTRAP_ADMIN_EMAIL: ${BOOTSTRAP_ADMIN_EMAIL}
      BOOTSTRAP_ADMIN_PASSWORD: ${BOOTSTRAP_ADMIN_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
      - backend_uploads:/app/uploads
    working_dir: /app
    command:
      - bash
      - -lc
      - |
          set -e
          echo "🚀 Starting Backend..."
          echo "🔧 Applying DB migrations..."
          python -c "from app.database import engine, Base; Base.metadata.create_all(bind=engine); print('✅ Database tables created')"

          # One-time admin bootstrap (gated by flag file and envs)
          if [ ! -f /app/.admin_bootstrapped ] && [ -n "$BOOTSTRAP_ADMIN_EMAIL" ] && [ -n "$BOOTSTRAP_ADMIN_PASSWORD" ]; then
            echo "👤 Bootstrapping admin (one-time)..."
            python - <<'PY'
import asyncio, os
from app.services.auth_service import AuthService
from app.database import SessionLocal

async def main():
    db = SessionLocal()
    try:
        auth = AuthService()
        try:
            await auth.register_user(db, {
                "email": os.environ.get("BOOTSTRAP_ADMIN_EMAIL") or "admin@autorisen.dev",
                "password": os.environ.get("BOOTSTRAP_ADMIN_PASSWORD") or "admin123",
                "full_name": "Autorisen Admin",
                "user_role": "admin"
            })
            print("✅ Admin bootstrapped or already exists")
        except Exception as e:
            print("ℹ️ Admin may already exist:", e)
    finally:
        db.close()

asyncio.run(main())
PY
            touch /app/.admin_bootstrapped
          fi

          echo "🎯 Starting FastAPI (reload)..."
          exec uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --log-level info
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python - <<'PY'
          import sys, urllib.request
          try:
              with urllib.request.urlopen("http://localhost:8000/api/health", timeout=2) as r:
                  sys.exit(0 if r.status == 200 else 1)
          except Exception:
              sys.exit(1)
          PY
      interval: 15s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  frontend:
    image: node:20-alpine
    container_name: autorisen-frontend
    working_dir: /app
    volumes:
      - ./client:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "5173:5173"
    environment:
      VITE_API_URL: http://localhost:8000
      VITE_APP_NAME: Autorisen
      VITE_ENVIRONMENT: development
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: "true"
    command:
      - sh
      - -lc
      - |
          set -e
          echo "🎨 Starting Frontend (Vite)..."
          npm install
          exec npm run dev -- --host 0.0.0.0 --port 5173
    depends_on:
      backend:
        condition: service_started
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: autorisen-pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["tools"]

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: autorisen-redis-commander
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: ${REDIS_COMMANDER_USER}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["tools"]

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
  backend_uploads:
  frontend_node_modules:
