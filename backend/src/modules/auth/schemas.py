"""Pydantic schemas for registration, authentication, and analytics."""

from __future__ import annotations

import re
from datetime import datetime
from enum import Enum
from typing import Any, Dict, Optional

from pydantic import BaseModel, EmailStr, Field, field_validator, model_validator

from ...schemas.user import UserOut

PASSWORD_PATTERN = re.compile(r"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]).{12,}$")
PASSWORD_ERROR = (
    "Password must be at least 12 characters and include uppercase, lowercase, digit, and special character."
)


class UserRole(str, Enum):
    """Supported roles."""

    CUSTOMER = "Customer"
    DEVELOPER = "Developer"


class RegisterStep1In(BaseModel):
    """Incoming payload for step 1 of registration."""

    first_name: str = Field(..., max_length=50)
    last_name: str = Field(..., max_length=50)
    email: EmailStr
    password: str
    confirm_password: str
    role: UserRole
    recaptcha_token: str

    @field_validator("first_name", "last_name")
    @classmethod
    def _strip_names(cls, value: str) -> str:
        value = value.strip()
        if not value:
            raise ValueError("Required")
        return value

    @field_validator("password")
    @classmethod
    def _validate_password(cls, value: str) -> str:
        if not PASSWORD_PATTERN.match(value):
            raise ValueError(PASSWORD_ERROR)
        return value

    @model_validator(mode="after")
    def _check_confirm_password(self) -> "RegisterStep1In":
        if self.password != self.confirm_password:
            raise ValueError("Passwords do not match.")
        return self


class RegisterStep1Out(BaseModel):
    """Response payload for step 1."""

    temp_token: str


class RegisterStep2In(BaseModel):
    """Incoming payload for step 2 of registration."""

    company_name: str = Field(..., max_length=100)
    profile: Dict[str, Any] = Field(default_factory=dict)

    @field_validator("company_name")
    @classmethod
    def _strip_company(cls, value: str) -> str:
        value = value.strip()
        if not value:
            raise ValueError("Company name is required.")
        return value


class RegisterStep2Out(BaseModel):
    """Response payload for completing registration."""

    access_token: str
    refresh_token: Optional[str]
    expires_at: Optional[datetime]
    user: UserOut


class LoginRequest(BaseModel):
    """Incoming payload to authenticate an existing user."""

    email: EmailStr
    password: str


class RefreshRequest(BaseModel):
    """Payload for exchanging a refresh token for a new access token."""

    refresh_token: str


class TokenResponse(BaseModel):
    """JWT token response structure."""

    access_token: str
    token_type: str = "bearer"
    expires_at: Optional[datetime] = None
    refresh_token: Optional[str] = None


class AnalyticsEventIn(BaseModel):
    """Analytics tracking payload."""

    event_type: str
    step: Optional[str] = None
    role: Optional[UserRole] = None
    details: Optional[Dict[str, Any]] = Field(default_factory=dict)

    @field_validator("event_type")
    @classmethod
    def _require_event_type(cls, value: str) -> str:
        value = value.strip()
        if not value:
            raise ValueError("event_type is required")
        return value


# Resolve forward references generated by postponed evaluation of annotations.
RegisterStep1In.model_rebuild()
RegisterStep1Out.model_rebuild()
RegisterStep2In.model_rebuild()
RegisterStep2Out.model_rebuild()
LoginRequest.model_rebuild()
RefreshRequest.model_rebuild()
TokenResponse.model_rebuild()
AnalyticsEventIn.model_rebuild()


# Ensure forward references are resolved when `from __future__ import annotations` is active.
RegisterStep1In.model_rebuild()
RegisterStep2In.model_rebuild()
RegisterStep2Out.model_rebuild()
TokenResponse.model_rebuild()
AnalyticsEventIn.model_rebuild()
