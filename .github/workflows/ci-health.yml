name: CI - Health Service

on:
  push:
    branches: [main, modularization/rfc]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test-health:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub (optional)
        if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: NOTE about DockerHub token
        if: ${{ ! (secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN) }}
        run: |
          echo "DOCKERHUB_USERNAME or DOCKERHUB_TOKEN not set — skipping Docker login (this is ok for tests)."
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          echo "Listing workspace files for debugging..."
          ls -R . | sed -n '1,200p'
          if [ -f services/health/requirements.txt ]; then
            echo "Found services/health/requirements.txt — installing from file"
            pip install -r services/health/requirements.txt
          else
            echo "services/health/requirements.txt not found — falling back to explicit installs"
            pip install fastapi==0.95.2 uvicorn[standard]==0.22.0 pytest
          fi
      - name: Run tests
        run: |
          pytest services/health/tests -q

      - name: Build and smoke-test Docker image
        run: |
          set -euo pipefail
          # Skip if there's no services/health directory (keeps CI robust for branches without the PoC)
          if [ ! -d services/health ]; then
            echo "No services/health directory found — skipping image smoke-test."
            exit 0
          fi
          IMAGE_NAME="autolocal-health:ci"
          echo "Building Docker image $IMAGE_NAME"
          docker build -t "$IMAGE_NAME" services/health
          # Run container in background, map internal port 8000 to a random host port
          CONTAINER_ID=$(docker run -d -p 0:8000 "$IMAGE_NAME")
          echo "Started container $CONTAINER_ID"
          # Wait up to 30s for docker to report the mapped host port
          HOST_PORT=""
          for i in $(seq 1 30); do
            HOST_PORT=$(docker port "$CONTAINER_ID" 8000/tcp | sed -n 's/.*://p' || true)
            if [ -n "$HOST_PORT" ]; then
              break
            fi
            sleep 1
          done
          if [ -z "$HOST_PORT" ]; then
            echo "Could not determine mapped host port" >&2
            docker logs "$CONTAINER_ID" || true
            docker rm -f "$CONTAINER_ID" || true
            exit 1
          fi
          echo "Mapped host port: $HOST_PORT"
          # Poll the host-mapped endpoint until it responds, up to 30s
          SUCCESS=1
          for i in $(seq 1 30); do
            if curl -sS --fail "http://127.0.0.1:$HOST_PORT/alive" >/dev/null 2>&1; then
              SUCCESS=0
              break
            fi
            sleep 1
          done
          if [ $SUCCESS -ne 0 ]; then
            echo "Smoke test failed - dumping container logs" >&2
            docker logs "$CONTAINER_ID" || true
            docker rm -f "$CONTAINER_ID" || true
            exit 1
          fi
          echo "Smoke test passed"
          docker rm -f "$CONTAINER_ID"
