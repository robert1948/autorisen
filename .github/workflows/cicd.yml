name: CI ‚Üí Gate ‚Üí Deploy (Heroku) + Manual Production Promotion

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      release_notes:
        description: "Short production release notes"
        required: false
        default: ""
      promote_from:
        description: "Heroku Staging app"
        required: false
        default: "autorisen"
      promote_to:
        description: "Heroku Production app"
        required: false
        default: "capecraft"

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  PYTHON_VERSION: "3.12"
  HEROKU_STAGING_APP: autorisen
  HEROKU_PROD_APP: capecraft
  MIN_COVERAGE: "0" # raise later (e.g., "60")

jobs:
  gate:
    name: "‚úÖ Quality Gate (non-blocking)"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install ruff mypy pytest pytest-cov

      - name: Lint (ruff)
        run: ruff check .
        continue-on-error: true

      - name: Type-check (mypy)
        run: mypy backend
        continue-on-error: true

      - name: Unit tests + coverage
        run: pytest -q --maxfail=1 --disable-warnings --cov=backend --cov-report=term-missing --cov-fail-under=${{ env.MIN_COVERAGE }}
        continue-on-error: true

      - name: Gate summary
        run: |
          echo "### Gate results" >> $GITHUB_STEP_SUMMARY
          echo "- Ruff, mypy, and tests ran. Failing checks were allowed to continue." >> $GITHUB_STEP_SUMMARY
          echo "- MIN_COVERAGE=${{ env.MIN_COVERAGE }}%" >> $GITHUB_STEP_SUMMARY

  deploy_staging:
    name: "üöÄ Deploy to Heroku (Staging: autorisen)"
    needs: [gate]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Heroku CLI (for app existence check)
        run: curl -s https://cli-assets.heroku.com/install.sh | sh

      - name: Verify Heroku app & auth
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          set -e
          heroku auth:token >/dev/null 2>&1 || true
          heroku apps:info -a "${{ env.HEROKU_STAGING_APP }}"

      # Push a clean repo containing only backend/ directly to HTTPS URL (no remote, no subtree)
      - name: Push backend/ to Heroku via HTTPS URL
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          set -euo pipefail
          APP="${{ env.HEROKU_STAGING_APP }}"
          URL="https://heroku:${HEROKU_API_KEY}@git.heroku.com/${APP}.git"   # no trailing slash

          # Create clean temp repo with ONLY backend/ at root
          WORK=/tmp/heroku-backend
          rm -rf "$WORK"
          mkdir -p "$WORK"
          rsync -a --delete --exclude=".git" backend/ "$WORK"/

          cd "$WORK"
          git init
          git checkout -b main
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name  "github-actions[bot]"
          git add .
          git commit -m "Deploy backend from $GITHUB_SHA"

          # Push directly to the HTTPS URL (avoids malformed remote/credential helper issues)
          git push --force "$URL" main:main
          git log --oneline -n 1

  promote_production:
    name: "üîê Manual Promotion to Production"
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    # To require manual approval: create a repo Environment named "production"
    # then uncomment:
    # environment: production
    steps:
      - name: Install Heroku CLI
        run: curl -s https://cli-assets.heroku.com/install.sh | sh

      - name: Heroku auth
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku auth:token >/dev/null 2>&1 || true

      - name: Promote slug from Staging ‚Üí Production
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          FROM_APP: ${{ github.event.inputs.promote_from || env.HEROKU_STAGING_APP }}
        run: heroku pipelines:promote -a "${FROM_APP}"

      - name: Verify Production releases
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          PROD_APP: ${{ github.event.inputs.promote_to || env.HEROKU_PROD_APP }}
        run: heroku releases -a "${PROD_APP}" | head -n 20

      - name: Post-promotion smoke check (HTTP 200)
        env:
          PROD_APP: ${{ github.event.inputs.promote_to || env.HEROKU_PROD_APP }}
        run: |
          set -e
          URL="https://${PROD_APP}.herokuapp.com"
          code=$(curl -s -o /dev/null -w "%{http_code}" "$URL/health" || true)
          if [ "$code" != "200" ]; then
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL/" || true)
          fi
          echo "HTTP code: $code"
          [ "$code" = "200" ] || { echo "‚ùå Smoke check failed"; exit 1; }
          echo "‚úÖ Production is up."
