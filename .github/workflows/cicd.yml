name: CI ‚Üí Gate ‚Üí Deploy (Heroku) + Manual Production Promotion

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      release_notes:
        description: "Short production release notes"
        required: false
        default: ""
      promote_from:
        description: "Heroku Staging app"
        required: false
        default: "autorisen"
      promote_to:
        description: "Heroku Production app"
        required: false
        default: "capecraft"

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  PYTHON_VERSION: "3.12"
  HEROKU_STAGING_APP: autorisen
  HEROKU_PROD_APP: capecraft

jobs:
  gate:
    name: ‚úÖ Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install ruff mypy pytest pytest-cov
      - name: Lint (ruff)
        run: ruff check .
      - name: Type-check (mypy) # tighten later by removing "|| true"
        run: mypy backend || true
      - name: Unit tests + coverage
        run: pytest -q --maxfail=1 --disable-warnings --cov=backend --cov-report=term-missing
      - name: Enforce coverage threshold (60%)
        run: |
          pct=$(pytest --cov=backend --cov-report=term | awk '/TOTAL/ {print $4}' | tr -d '%')
          echo "Coverage: ${pct}%"
          [ "${pct%.*}" -ge 60 ] || { echo "Coverage below 60%"; exit 1; }

  deploy_staging:
    name: "üöÄ Deploy to Heroku (Staging: autorisen)"
    needs: [gate]
    if: github.ref == 'refs/heads/main' && needs.gate.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python (Buildpacks flow)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Deploy via Heroku Buildpacks
        uses: AkhileshNS/heroku-deploy@v3.12.11
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: autorisen
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          branch: main
          usedocker: false

  promote_production:
    name: üîê Manual Promotion to Production
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    # Create this environment in repo settings to enable manual approval.
    #environment: production
    steps:
      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh
      - name: Heroku auth
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku auth:token >/dev/null 2>&1 || true
      - name: Promote slug from Staging ‚Üí Production
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          FROM_APP: ${{ github.event.inputs.promote_from || env.HEROKU_STAGING_APP }}
        run: heroku pipelines:promote -a "${FROM_APP}"
      - name: Verify Production releases
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          PROD_APP: ${{ github.event.inputs.promote_to || env.HEROKU_PROD_APP }}
        run: heroku releases -a "${PROD_APP}" | head -n 20
      - name: Post-promotion smoke check (HTTP 200)
        env:
          PROD_APP: ${{ github.event.inputs.promote_to || env.HEROKU_PROD_APP }}
        run: |
          set -e
          URL="https://${PROD_APP}.herokuapp.com"
          code=$(curl -s -o /dev/null -w "%{http_code}" "$URL/health" || true)
          if [ "$code" != "200" ]; then
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL/" || true)
          fi
          echo "HTTP code: $code"
          [ "$code" = "200" ] || { echo "‚ùå Smoke check failed"; exit 1; }
          echo "‚úÖ Production is up."
