<<<<<<< HEAD
name: CI → Gate → Deploy (Heroku) + Manual Production Promotion

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      release_notes:
        description: "Short production release notes"
        required: false
        default: ""
      promote_from:
        description: "Heroku Staging app"
        required: false
        default: "autorisen"
      promote_to:
        description: "Heroku Production app"
        required: false
        default: "capecraft"
=======
name: CI/CD — autorisen

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: autorisen-${{ github.ref }}
  cancel-in-progress: true
>>>>>>> 01f6b551 (chore: initial commit with Makefile and CI/CD workflow)

permissions:
  contents: read

<<<<<<< HEAD
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  PYTHON_VERSION: "3.12"
  HEROKU_STAGING_APP: autorisen
  HEROKU_PROD_APP: capecraft
  MIN_COVERAGE: "0" # raise later (e.g., "60")

jobs:
  gate:
    name: "✅ Quality Gate (non-blocking)"
    runs-on: ubuntu-latest
=======
env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"
  # Configure DB URL used by tests (override in repo/Org secrets if needed)
  TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/autorisen_test
  # Heroku
  HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
  HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
  HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

jobs:
  sanity:
    name: Sanity (fmt + lint + tests)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        ports: ["5432:5432"]
        env:
          POSTGRES_DB: autorisen_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

>>>>>>> 01f6b551 (chore: initial commit with Makefile and CI/CD workflow)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

<<<<<<< HEAD
      - name: Setup Python
=======
      - name: Set up Python
>>>>>>> 01f6b551 (chore: initial commit with Makefile and CI/CD workflow)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

<<<<<<< HEAD
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install ruff mypy pytest pytest-cov

      - name: Lint (ruff)
        run: ruff check .
        continue-on-error: true

      - name: Type-check (mypy)
        run: mypy backend
        continue-on-error: true

      - name: Unit tests + coverage
        run: pytest -q --maxfail=1 --disable-warnings --cov=backend --cov-report=term-missing --cov-fail-under=${{ env.MIN_COVERAGE }}
        continue-on-error: true

      - name: Gate summary
        run: |
          echo "### Gate results" >> $GITHUB_STEP_SUMMARY
          echo "- Ruff, mypy, and tests ran. Failing checks were allowed to continue." >> $GITHUB_STEP_SUMMARY
          echo "- MIN_COVERAGE=${{ env.MIN_COVERAGE }}%" >> $GITHUB_STEP_SUMMARY

  deploy_staging:
    name: "🚀 Deploy to Heroku (Staging: autorisen)"
    needs: [gate]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Heroku CLI (for app existence check)
        run: curl -s https://cli-assets.heroku.com/install.sh | sh

      - name: Verify Heroku app & auth
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          set -e
          heroku auth:token >/dev/null 2>&1 || true
          heroku apps:info -a "${{ env.HEROKU_STAGING_APP }}"

      # Push a clean repo containing only backend/ directly to HTTPS URL (no remote, no subtree)
      - name: Push backend/ to Heroku via HTTPS URL
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          set -euo pipefail
          APP="${{ env.HEROKU_STAGING_APP }}"
          if [[ -z "${HEROKU_API_KEY:-}" ]]; then
            echo "Error: HEROKU_API_KEY is not set!" >&2
            exit 1
          fi
          URL="https://heroku:${HEROKU_API_KEY}@git.heroku.com/${APP}.git"   # no trailing slash
          echo "Heroku remote URL: https://heroku:[REDACTED]@git.heroku.com/${APP}.git"

          # Create clean temp repo with ONLY backend/ at root
          WORK=/tmp/heroku-backend
          rm -rf "$WORK"
          mkdir -p "$WORK"
          rsync -a --delete --exclude=".git" backend/ "$WORK"/

          cd "$WORK"
          git init
          git checkout -b main
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name  "github-actions[bot]"
          git add .
          git commit -m "Deploy backend from $GITHUB_SHA"

          # Push directly to the HTTPS URL (avoids malformed remote/credential helper issues)
          git remote add heroku "$URL"
          git remote -v
          git push --force "$URL" main:main
          git log --oneline -n 1

  promote_production:
    name: "🔐 Manual Promotion to Production"
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    # To require manual approval: create a repo Environment named "production"
    # then uncomment:
    # environment: production
    steps:
      - name: Install Heroku CLI
        run: curl -s https://cli-assets.heroku.com/install.sh | sh

      - name: Heroku auth
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku auth:token >/dev/null 2>&1 || true

      - name: Promote slug from Staging → Production
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          FROM_APP: ${{ github.event.inputs.promote_from || env.HEROKU_STAGING_APP }}
        run: heroku pipelines:promote -a "${FROM_APP}"

      - name: Verify Production releases
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          PROD_APP: ${{ github.event.inputs.promote_to || env.HEROKU_PROD_APP }}
        run: heroku releases -a "${PROD_APP}" | head -n 20

      - name: Post-promotion smoke check (HTTP 200)
        env:
          PROD_APP: ${{ github.event.inputs.promote_to || env.HEROKU_PROD_APP }}
        run: |
          set -e
          URL="https://${PROD_APP}.herokuapp.com"
          code=$(curl -s -o /dev/null -w "%{http_code}" "$URL/health" || true)
          if [ "$code" != "200" ]; then
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL/" || true)
          fi
          echo "HTTP code: $code"
          [ "$code" = "200" ] || { echo "❌ Smoke check failed"; exit 1; }
          echo "✅ Production is up."
=======
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: client/package-lock.json

      - name: Python deps (backend)
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort ruff pytest

      - name: Node deps (frontend)
        working-directory: client
        run: npm ci

      - name: Export test env
        run: |
          echo "DATABASE_URL=${TEST_DATABASE_URL}" >> $GITHUB_ENV

      - name: Format & Lint
        run: |
          make fmt
          make lint

      - name: Run backend tests
        working-directory: backend
        env:
          DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        run: pytest -q || true

      - name: Run frontend tests (if configured)
        working-directory: client
        run: |
          if [ -f package.json ] && jq -e '.scripts.test' package.json >/dev/null 2>&1; then
            npm test --silent || true
          else
            echo "No frontend tests configured; skipping."
          fi

  deploy:
    name: Deploy → Heroku (container)
    needs: sanity
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://${{ env.HEROKU_APP_NAME }}.herokuapp.com

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Heroku secrets
        run: |
          for v in HEROKU_API_KEY HEROKU_EMAIL HEROKU_APP_NAME; do
            if [ -z "${!v}" ]; then echo "::error::Missing $v"; exit 1; fi
          done

      - name: Login to Heroku Container Registry
        run: |
          echo "${HEROKU_API_KEY}" | docker login --username=_ --password-stdin registry.heroku.com
          curl https://cli-assets.heroku.com/install-ubuntu.sh | sh
          heroku container:login

      - name: Build & Push (web)
        run: |
          docker build -t registry.heroku.com/${HEROKU_APP_NAME}/web .
          docker push registry.heroku.com/${HEROKU_APP_NAME}/web

      - name: Release
        run: heroku container:release web -a "${HEROKU_APP_NAME}"

      - name: Post-release migrations (Alembic if present)
        run: |
          heroku run -a "${HEROKU_APP_NAME}" -- bash -lc 'if command -v alembic >/dev/null 2>&1; then cd backend && alembic upgrade head; else echo "Alembic not found, skipping."; fi'

      - name: Health check
        run: |
          for i in {1..10}; do
            if curl -fsS https://${HEROKU_APP_NAME}.herokuapp.com/api/health >/dev/null; then
              echo "App is healthy"; exit 0; fi
            echo "Waiting for app..." && sleep 6
          done
          echo "::warning::Health endpoint did not return 200 in time."
>>>>>>> 01f6b551 (chore: initial commit with Makefile and CI/CD workflow)
